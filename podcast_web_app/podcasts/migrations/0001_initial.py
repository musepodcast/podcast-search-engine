# Generated by Django 5.1.3 on 2025-02-27 01:15

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.search
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Channel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("channel_title", models.TextField(unique=True)),
                ("sanitized_channel_title", models.TextField()),
                ("channel_author", models.TextField(blank=True, null=True)),
                ("channel_summary", models.TextField(blank=True, null=True)),
                ("channel_image_url", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "channels",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ChannelTranslations",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("channel_title", models.TextField(unique=True)),
                ("sanitized_channel_title", models.TextField()),
                ("channel_author", models.TextField(blank=True, null=True)),
                ("channel_summary", models.TextField(blank=True, null=True)),
                ("channel_image_url", models.TextField(blank=True, null=True)),
                ("language", models.CharField(blank=True, max_length=50, null=True)),
                ("translated", models.BooleanField(blank=True, null=True)),
            ],
            options={
                "db_table": "channelstranslations",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Chapter",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("chapter_title", models.TextField()),
                ("chapter_time", models.CharField(max_length=10)),
            ],
            options={
                "db_table": "chapters",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ChapterTranslations",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("chapter_title", models.TextField()),
                ("chapter_time", models.CharField(max_length=10)),
                ("language", models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                "db_table": "chapterstranslations",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Episode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("episode_title", models.TextField()),
                ("sanitized_episode_title", models.TextField()),
                ("publication_date", models.DateTimeField(blank=True, null=True)),
                ("duration", models.TextField(blank=True, null=True)),
                ("episode_number", models.IntegerField(blank=True, null=True)),
                ("explicit", models.BooleanField(blank=True, null=True)),
                ("guid", models.TextField(unique=True)),
                ("audio_url", models.TextField(blank=True, null=True)),
                ("image_url", models.TextField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("categories", models.JSONField(blank=True, null=True)),
                ("language", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "tsv_transcript",
                    django.contrib.postgres.search.SearchVectorField(
                        blank=True, null=True
                    ),
                ),
            ],
            options={
                "db_table": "episodes",
                "ordering": ["-publication_date"],
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="EpisodeTranslations",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("episode_title", models.TextField()),
                ("sanitized_episode_title", models.TextField()),
                ("publication_date", models.DateTimeField(blank=True, null=True)),
                ("duration", models.TextField(blank=True, null=True)),
                ("episode_number", models.IntegerField(blank=True, null=True)),
                ("explicit", models.BooleanField(blank=True, null=True)),
                ("guid", models.TextField(unique=True)),
                ("audio_url", models.TextField(blank=True, null=True)),
                ("image_url", models.TextField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("categories", models.JSONField(blank=True, null=True)),
                ("language", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "tsv_transcript",
                    django.contrib.postgres.search.SearchVectorField(
                        blank=True, null=True
                    ),
                ),
                ("translated", models.BooleanField(blank=True, null=True)),
            ],
            options={
                "db_table": "episodestranslations",
                "ordering": ["-publication_date"],
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Transcript",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("segment_time", models.TextField()),
                ("segment_text", models.TextField()),
                ("speaker", models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                "db_table": "transcripts",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="TranscriptTranslations",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("segment_time", models.TextField()),
                ("segment_text", models.TextField()),
                ("speaker", models.CharField(blank=True, max_length=50, null=True)),
                ("language", models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                "db_table": "transcriptstranslations",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
